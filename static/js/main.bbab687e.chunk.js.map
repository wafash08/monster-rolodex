{"version":3,"sources":["components/card/card.jsx","components/card-list/card-list.jsx","components/search-box/search-box.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","type","placeholder","onChange","onSearchChange","App","state","seacrField","event","setState","target","value","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","toLocaleLowerCase","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iUAEe,SAASA,EAAKC,GAC3B,OACE,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BACHC,IAAI,YAEN,6BAAKL,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,W,MCNT,SAASC,EAASR,GAC/B,OACE,qBAAKC,UAAU,YAAf,SACGD,EAAMS,SAASC,KAAI,SAAAP,GAAO,OACzB,cAACJ,EAAD,CAAuBI,QAASA,GAArBA,EAAQC,S,UCNdO,EAAY,SAAAX,GAAK,OAC5B,uBACEC,UAAU,aACVW,KAAK,SACLC,YAAY,kBACZC,SAAUd,EAAMe,kBC8BLC,E,4MA/BbC,MAAQ,CACNR,SAAU,GACVS,WAAY,I,EASdH,eAAiB,SAAAI,GACf,EAAKC,SAAS,CAAEF,WAAYC,EAAME,OAAOC,S,uDAP3C,WAAqB,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKP,SAAS,CAAEX,SAAUkB,S,oBAO7C,WAAU,IAAD,EAC0BC,KAAKX,MAA9BR,EADD,EACCA,SAAUS,EADX,EACWA,WACZW,EAAmBpB,EAASqB,QAAO,SAAA3B,GAAO,OAC9CA,EAAQG,KAAKyB,cAAcC,SAASd,EAAWe,wBAGjD,OACE,sBAAKhC,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CAAWc,eAAgBa,KAAKb,iBAChC,cAACP,EAAD,CAAUC,SAAUoB,W,GA1BVK,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.bbab687e.chunk.js","sourcesContent":["import \"./card.css\";\r\n\r\nexport default function Card(props) {\r\n  return (\r\n    <div className='card-container'>\r\n      <img\r\n        src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\r\n        alt='monster'\r\n      />\r\n      <h2>{props.monster.name}</h2>\r\n      <p>{props.monster.email}</p>\r\n    </div>\r\n  );\r\n}\r\n","import Card from \"../card/card\";\r\n\r\nimport \"./card-list.css\";\r\n\r\nexport default function CardList(props) {\r\n  return (\r\n    <div className='card-list'>\r\n      {props.monsters.map(monster => (\r\n        <Card key={monster.id} monster={monster} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import \"./search-box.css\";\r\n\r\nexport const SearchBox = props => (\r\n  <input\r\n    className='search-box'\r\n    type='search'\r\n    placeholder='search monsters'\r\n    onChange={props.onSearchChange}\r\n  />\r\n);\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport CardList from \"./components/card-list/card-list\";\nimport { SearchBox } from \"./components/search-box/search-box\";\n\nclass App extends Component {\n  state = {\n    monsters: [],\n    seacrField: \"\",\n  };\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json())\n      .then(users => this.setState({ monsters: users }));\n  }\n\n  onSearchChange = event => {\n    this.setState({ seacrField: event.target.value });\n  };\n\n  render() {\n    const { monsters, seacrField } = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(seacrField.toLocaleLowerCase())\n    );\n\n    return (\n      <div className='App'>\n        <h1>Monster Rolodex</h1>\n        <SearchBox onSearchChange={this.onSearchChange} />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}